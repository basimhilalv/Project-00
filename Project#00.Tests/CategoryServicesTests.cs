using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Moq;
using Project_00.Data;
using Project_00.Dtos;
using Project_00.Models;
using Project_00.Services;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Project_00.Tests
{
    public class CategoryServicesTests
    {
        private readonly Mock<IMapper> _mockMapper;
        private readonly DbContextOptions<Context> _dbContextOptions;
        public CategoryServicesTests()
        {
            _dbContextOptions = new DbContextOptionsBuilder<Context>()
                .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
                .Options;
            _mockMapper = new Mock<IMapper>();
        }
        private async Task<Context> GetDbContextAsync()
        {
            var context = new Context(_dbContextOptions);
            await context.Database.EnsureCreatedAsync();
            return context;
        }

        [Fact]
        public async Task GetCategory_ExistingId_ReturnsCategory()
        {
            // Arrange
            await using var context = await GetDbContextAsync();
            var existingCategory = new Category { Id = 1, Name = "Vegetable" };
            await context.Categories.AddAsync(existingCategory);
            await context.SaveChangesAsync();

            var categoryService = new CategoryServices(_mockMapper.Object, context);

            // Act
            var result = await categoryService.GetCategory(1);

            // Assert
            Assert.NotNull(result);
            Assert.Equal(existingCategory.Id, result.Id);
            Assert.Equal(existingCategory.Name, result.Name);
        }
        [Fact]
        public async Task GetCategory_NonExistingId_ReturnsNull()
        {
            // Arrange
            await using var context = await GetDbContextAsync();
            var categoryService = new CategoryServices(_mockMapper.Object, context);

            // Act
            var result = await categoryService.GetCategory(99); // Non-existent ID

            // Assert
            Assert.Null(result);
        }
        [Fact]
        public async Task GetCategories_ReturnsAllCategories()
        {
            // Arrange
            await using var context = await GetDbContextAsync();
            var categories = new List<Category>
            {
                new Category { Id = 1, Name = "Electronics" },
                new Category { Id = 2, Name = "Books" }
            };
            await context.Categories.AddRangeAsync(categories);
            await context.SaveChangesAsync();

            var categoryService = new CategoryServices(_mockMapper.Object, context);

            // Act
            var result = await categoryService.GetCategories();

            // Assert
            Assert.NotNull(result);
            Assert.Equal(2, result.Count());
            Assert.Contains(result, c => c.Name == "Electronics");
            Assert.Contains(result, c => c.Name == "Books");
        }

        [Fact]
        public async Task GetCategories_NoCategories_ReturnsEmptyList()
        {
            // Arrange
            await using var context = await GetDbContextAsync();
            var categoryService = new CategoryServices(_mockMapper.Object, context);

            // Act
            var result = await categoryService.GetCategories();

            // Assert
            Assert.NotNull(result);
            Assert.Empty(result);
        }
        [Fact]
        public async Task AddCategory_NewCategory_AddsToDatabaseAndReturnsCategory()
        {
            // Arrange
            await using var context = await GetDbContextAsync();
            var categoryService = new CategoryServices(_mockMapper.Object, context);
            var categoryDto = new CategoryDto { Name = "Clothing" };
            var expectedCategory = new Category { Id = 1, Name = "Clothing" }; // Assuming ID is generated by DB

            _mockMapper.Setup(m => m.Map<Category>(categoryDto)).Returns(expectedCategory);

            // Act
            var result = await categoryService.AddCategory(categoryDto);

            // Assert
            Assert.NotNull(result);
            Assert.Equal(categoryDto.Name, result.Name);
            Assert.True(await context.Categories.AnyAsync(c => c.Name == categoryDto.Name));
        }
        [Fact]
        public async Task AddCategory_ExistingName_ReturnsNull()
        {
            // Arrange
            await using var context = await GetDbContextAsync();
            var existingCategory = new Category { Id = 1, Name = "Electronics" };
            await context.Categories.AddAsync(existingCategory);
            await context.SaveChangesAsync();

            var categoryService = new CategoryServices(_mockMapper.Object, context);
            var categoryDto = new CategoryDto { Name = "Electronics" };

            // Act
            var result = await categoryService.AddCategory(categoryDto);

            // Assert
            Assert.Null(result);
            Assert.Single(await context.Categories.ToListAsync()); // Ensure no new category was added
        }

        [Fact]
        public async Task DeleteCategory_ExistingId_RemovesFromDatabaseAndReturnsCategory()
        {
            // Arrange
            await using var context = await GetDbContextAsync();
            var existingCategory = new Category { Id = 1, Name = "Electronics" };
            await context.Categories.AddAsync(existingCategory);
            await context.SaveChangesAsync();

            var categoryService = new CategoryServices(_mockMapper.Object, context);

            // Act
            var result = await categoryService.DeleteCategory(1);

            // Assert
            Assert.NotNull(result);
            Assert.Equal(existingCategory.Id, result.Id);
            Assert.Equal(existingCategory.Name, result.Name);
            Assert.False(await context.Categories.AnyAsync(c => c.Id == 1));
        }

        [Fact]
        public async Task DeleteCategory_NonExistingId_ReturnsNull()
        {
            // Arrange
            await using var context = await GetDbContextAsync();
            var categoryService = new CategoryServices(_mockMapper.Object, context);

            // Act
            var result = await categoryService.DeleteCategory(99); // Non-existent ID

            // Assert
            Assert.Null(result);
            Assert.Empty(await context.Categories.ToListAsync()); // Ensure no unintended deletions
        }
        [Fact]
        public async Task UpdateCategory_ExistingId_UpdatesDatabaseAndReturnsUpdatedCategory()
        {
            // Arrange
            await using var context = await GetDbContextAsync();
            var existingCategory = new Category { Id = 1, Name = "Electronics" };
            await context.Categories.AddAsync(existingCategory);
            await context.SaveChangesAsync();

            var categoryService = new CategoryServices(_mockMapper.Object, context);
            var categoryDto = new CategoryDto { Name = "Updated Electronics" };

            // Act
            var result = await categoryService.UpdateCategory(1, categoryDto);

            // Assert
            Assert.NotNull(result);
            Assert.Equal(1, result.Id);
            Assert.Equal(categoryDto.Name, result.Name);
            var updatedCategoryFromDb = await context.Categories.FindAsync(1);
            Assert.NotNull(updatedCategoryFromDb);
            Assert.Equal(categoryDto.Name, updatedCategoryFromDb.Name);
        }

        [Fact]
        public async Task UpdateCategory_NonExistingId_ReturnsNull()
        {
            // Arrange
            await using var context = await GetDbContextAsync();
            var categoryService = new CategoryServices(_mockMapper.Object, context);
            var categoryDto = new CategoryDto { Name = "Updated Category" };

            // Act
            var result = await categoryService.UpdateCategory(99, categoryDto); // Non-existent ID

            // Assert
            Assert.Null(result);
            Assert.Empty(await context.Categories.ToListAsync()); // Ensure no unintended updates
        }

        [Theory]
        [InlineData("New Category 1", true)]
        [InlineData("Another New Category", true)]
        [InlineData("Existing Category", false)] // Assuming "Existing Category" already exists
        public async Task AddCategory_VariousInputs_ReturnsExpectedResult(string categoryName, bool shouldSucceed)
        {
            // Arrange
            await using var context = await GetDbContextAsync();
            if (!shouldSucceed)
            {
                await context.Categories.AddAsync(new Category { Name = "Existing Category" });
                await context.SaveChangesAsync();
            }
            var categoryService = new CategoryServices(_mockMapper.Object, context);
            var categoryDto = new CategoryDto { Name = categoryName };
            var expectedCategory = new Category { Id = 1, Name = categoryName };
            _mockMapper.Setup(m => m.Map<Category>(categoryDto)).Returns(expectedCategory);

            // Act
            var result = await categoryService.AddCategory(categoryDto);

            // Assert
            if (shouldSucceed)
            {
                Assert.NotNull(result);
                Assert.Equal(categoryName, result.Name);
                Assert.True(await context.Categories.AnyAsync(c => c.Name == categoryName));
            }
            else
            {
                Assert.Null(result);
                Assert.Equal(shouldSucceed, !await context.Categories.AnyAsync(c => c.Name == categoryName && c.Id != 0));
            }
        }
    }
}
